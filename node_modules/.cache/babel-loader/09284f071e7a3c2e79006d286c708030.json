{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar Enums_1 = require(\"./Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function initAsync(options) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(function () {\n        return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this.initRawData(true);\n\n                case 2:\n                  container.particles.redraw();\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }, 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position, particle) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      var pos = Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n\n      if (options.type === Enums_1.Type.inline && particle) {\n        particle.initialPosition = pos;\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle) {\n      var options = this.options;\n\n      if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n        if (!this.checkInsidePolygon(particle.getPosition())) {\n          PolygonMaskInstance.polygonBounce(particle);\n          return true;\n        }\n      } else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.getPosition());\n\n        if (dist > this.polygonMaskMoveRadius) {\n          PolygonMaskInstance.polygonBounce(particle);\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options;\n      var polygonDraw = options.draw;\n\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            PolygonMaskInstance.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            PolygonMaskInstance.drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return PolygonMaskInstance.parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function downloadSvgPath(svgUrl, force) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options;\n                url = svgUrl || options.url;\n                forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 5:\n                _context3.next = 7;\n                return fetch(url);\n\n              case 7:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 10:\n                _context3.t0 = this;\n                _context3.next = 13;\n                return req.text();\n\n              case 13:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = Utils_1.Utils.itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var path = Utils_1.Utils.itemFromArray(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.options;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function initRawData(force) {\n      return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }], [{\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle) {\n      particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n      particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n    }\n  }, {\n    key: \"drawPolygonMask\",\n    value: function drawPolygonMask(context, rawData, stroke) {\n      var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n      if (!color) {\n        return;\n      }\n\n      context.beginPath();\n      context.moveTo(rawData[0].x, rawData[0].y);\n\n      var _iterator5 = _createForOfIteratorHelper(rawData),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var item = _step5.value;\n          context.lineTo(item.x, item.y);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      context.closePath();\n      context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n      context.lineWidth = stroke.width;\n      context.stroke();\n    }\n  }, {\n    key: \"drawPolygonMaskPath\",\n    value: function drawPolygonMaskPath(context, path, stroke, position) {\n      context.translate(position.x, position.y);\n      var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n      if (!color) {\n        return;\n      }\n\n      context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n      context.lineWidth = stroke.width;\n      context.stroke(path);\n    }\n  }, {\n    key: \"parsePaths\",\n    value: function parsePaths(paths, scale, offset) {\n      var res = [];\n\n      var _iterator6 = _createForOfIteratorHelper(paths),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var path = _step6.value;\n          var segments = path.element.pathSegList;\n          var len = segments.numberOfItems;\n          var p = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < len; i++) {\n            var segment = segments.getItem(i);\n            var svgPathSeg = window.SVGPathSeg;\n\n            switch (segment.pathSegType) {\n              case svgPathSeg.PATHSEG_MOVETO_ABS:\n              case svgPathSeg.PATHSEG_LINETO_ABS:\n              case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n              case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n              case svgPathSeg.PATHSEG_ARC_ABS:\n              case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n              case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n                {\n                  var absSeg = segment;\n                  p.x = absSeg.x;\n                  p.y = absSeg.y;\n                  break;\n                }\n\n              case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                p.x = segment.x;\n                break;\n\n              case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                p.y = segment.y;\n                break;\n\n              case svgPathSeg.PATHSEG_LINETO_REL:\n              case svgPathSeg.PATHSEG_MOVETO_REL:\n              case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n              case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n              case svgPathSeg.PATHSEG_ARC_REL:\n              case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n              case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n                {\n                  var relSeg = segment;\n                  p.x += relSeg.x;\n                  p.y += relSeg.y;\n                  break;\n                }\n\n              case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                p.x += segment.x;\n                break;\n\n              case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                p.y += segment.y;\n                break;\n\n              case svgPathSeg.PATHSEG_UNKNOWN:\n              case svgPathSeg.PATHSEG_CLOSEPATH:\n                continue;\n            }\n\n            res.push({\n              x: p.x * scale + offset.x,\n              y: p.y * scale + offset.y\n            });\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return res;\n    }\n  }]);\n\n  return PolygonMaskInstance;\n}();\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["Object","defineProperty","exports","value","PolygonMaskInstance","tslib_1","require","Enums_1","Utils_1","PolygonMask_1","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","__awaiter","load","polygon","polygonMaskOptions","enable","initRawData","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","position","particle","_a","_b","length","pos","Utils","deepExtend","randomPoint","initialPosition","checkInsidePolygon","getPosition","polygonBounce","dist","getDistance","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","Error","Constants","noPolygonFound","canvasSize","canvas","size","x","Math","random","y","inside","i","j","pi","pj","intersect","outside","xml","force","_c","forceDownload","undefined","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","distance","floor","point","getPointAtLength","index","_d","_e","_f","_g","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D","velocity","horizontal","vertical","color","ColorUtils","colorToRgb","beginPath","strokeStyle","getStyleFromRgb","lineWidth","translate","opacity","res","segments","pathSegList","len","numberOfItems","p","segment","getItem","svgPathSeg","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAMG,aAAa,GAAGH,OAAO,CAAC,+BAAD,CAA7B;;IACMF,mB;AACF,+BAAYM,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiB;AACbC,MAAAA,MAAM,EAAE,CADK;AAEbC,MAAAA,KAAK,EAAE;AAFM,KAAjB;AAIA,SAAKC,eAAL,GAAuB,CAAC,CAACC,MAAM,CAACC,MAAhC;AACA,SAAKC,OAAL,GAAe,IAAIR,aAAa,CAACS,WAAlB,EAAf;AACA,SAAKC,qBAAL,GAA6B,KAAKF,OAAL,CAAaG,IAAb,CAAkBC,MAAlB,GAA2BX,SAAS,CAACY,MAAV,CAAiBC,UAAzE;AACH;;;;8BA2FSN,O,EAAS;AACf,aAAOZ,OAAO,CAACmB,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3C,qBAAKP,OAAL,CAAaQ,IAAb,CAAkBR,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACS,OAA5E;AACMC,gBAAAA,kBAFqC,GAEhB,KAAKV,OAFW;AAG3C,qBAAKE,qBAAL,GAA6BQ,kBAAkB,CAACP,IAAnB,CAAwBC,MAAxB,GAAiC,KAAKX,SAAL,CAAeY,MAAf,CAAsBC,UAApF;;AAH2C,qBAIvCI,kBAAkB,CAACC,MAJoB;AAAA;AAAA;AAAA;;AAAA;AAKvC,uBAAM,KAAKC,WAAL,EAAN;;AALuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxC,EAAP;AAQH;;;6BACQ;AAAA;;AACL,UAAMnB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMO,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,EAAEA,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaC,IAAlD,CAAJ,EAA6D;AACzD;AACH;;AACD,UAAI,KAAKC,aAAT,EAAwB;AACpBC,QAAAA,YAAY,CAAC,KAAKD,aAAN,CAAZ;AACH;;AACD,WAAKA,aAAL,GAAqBlB,MAAM,CAACoB,UAAP,CAAkB;AAAA,eAAM9B,OAAO,CAACmB,SAAR,CAAkB,KAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjF,yBAAM,KAAKK,WAAL,CAAiB,IAAjB,CAAN;;AADiF;AAEjFnB,kBAAAA,SAAS,CAAC0B,SAAV,CAAoBC,MAApB;;AAFiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxC,EAAN;AAAA,OAAlB,EAGjB,GAHiB,CAArB;AAIH;;;2BACM;AACH,aAAO,KAAKC,GAAZ;AACA,aAAO,KAAKC,KAAZ;AACH;;;8CACyB;AACtB,UAAMtB,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAIA,OAAO,CAACW,MAAR,IACAX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAD9B,KAECvB,OAAO,CAACuB,MAAR,CAAeC,WAAf,KAA+BlC,OAAO,CAACmC,iBAAR,CAA0BC,WAAzD,IACG1B,OAAO,CAACuB,MAAR,CAAeC,WAAf,KAA+BlC,OAAO,CAACmC,iBAAR,CAA0BE,QAH7D,CAAJ,EAG4E;AACxE,aAAKC,UAAL;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;qCACgBC,Q,EAAUC,Q,EAAU;AACjC,UAAIC,EAAJ,EAAQC,EAAR;;AACA,UAAMhC,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,EAAEA,OAAO,CAACW,MAAR,IAAkB,CAAC,CAACqB,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKV,GAAX,MAAoB,IAApB,IAA4BU,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAA9D,MAA0E,IAA1E,IAAkFD,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuG,CAAxG,IAA6G,CAAjI,CAAJ,EAAyI;AACrI;AACH;;AACD,UAAME,GAAG,GAAG3C,OAAO,CAAC4C,KAAR,CAAcC,UAAd,CAAyB,EAAzB,EAA6BP,QAAQ,GAAGA,QAAH,GAAc,KAAKQ,WAAL,EAAnD,CAAZ;;AACA,UAAIrC,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAA9B,IAAwCO,QAA5C,EAAsD;AAClDA,QAAAA,QAAQ,CAACQ,eAAT,GAA2BJ,GAA3B;AACH;;AACD,aAAOA,GAAP;AACH;;;mCACcJ,Q,EAAU;AACrB,UAAM9B,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAIA,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaC,IAAhD,IAAwDf,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAA1F,EAAkG;AAC9F,YAAI,CAAC,KAAKgB,kBAAL,CAAwBT,QAAQ,CAACU,WAAT,EAAxB,CAAL,EAAsD;AAClDrD,UAAAA,mBAAmB,CAACsD,aAApB,CAAkCX,QAAlC;AACA,iBAAO,IAAP;AACH;AACJ,OALD,MAMK,IAAI9B,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAAhD,IAA0DO,QAAQ,CAACQ,eAAvE,EAAwF;AACzF,YAAMI,IAAI,GAAGnD,OAAO,CAAC4C,KAAR,CAAcQ,WAAd,CAA0Bb,QAAQ,CAACQ,eAAnC,EAAoDR,QAAQ,CAACU,WAAT,EAApD,CAAb;;AACA,YAAIE,IAAI,GAAG,KAAKxC,qBAAhB,EAAuC;AACnCf,UAAAA,mBAAmB,CAACsD,aAApB,CAAkCX,QAAlC;AACA,iBAAO,IAAP;AACH;AACJ;;AACD,aAAO,KAAP;AACH;;;uCACkBD,Q,EAAU;AACzB,UAAM7B,OAAO,GAAG,KAAKA,OAArB;AACA,aAAQA,OAAO,CAACW,MAAR,IACJX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaC,IAD1B,IAEJf,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAF1B,IAGJ,KAAKgB,kBAAL,CAAwBV,QAAxB,CAHJ;AAIH;;;yBACIe,O,EAAS;AACV,UAAIb,EAAJ;;AACA,UAAI,EAAE,CAACA,EAAE,GAAG,KAAKT,KAAX,MAAsB,IAAtB,IAA8BS,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAAJ,EAAyE;AACrE;AACH;;AACD,UAAMjC,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM6C,WAAW,GAAG7C,OAAO,CAAC8C,IAA5B;;AACA,UAAI,EAAE9C,OAAO,CAACW,MAAR,IAAkBkC,WAAW,CAAClC,MAAhC,CAAJ,EAA6C;AACzC;AACH;;AACD,UAAMoC,OAAO,GAAG,KAAK1B,GAArB;;AAVU,iDAWS,KAAKC,KAXd;AAAA;;AAAA;AAWV,4DAA+B;AAAA,cAApB0B,IAAoB;AAC3B,cAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;AACA,cAAMC,eAAe,GAAG,KAAKrD,eAA7B;;AACA,cAAI,CAAC+C,OAAL,EAAc;AACV;AACH;;AACD,cAAIM,eAAe,IAAID,MAAnB,IAA6B,KAAKE,MAAtC,EAA8C;AAC1ChE,YAAAA,mBAAmB,CAACiE,mBAApB,CAAwCR,OAAxC,EAAiDK,MAAjD,EAAyDJ,WAAW,CAACQ,MAArE,EAA6E,KAAKF,MAAlF;AACH,WAFD,MAGK,IAAIJ,OAAJ,EAAa;AACd5D,YAAAA,mBAAmB,CAACmE,eAApB,CAAoCV,OAApC,EAA6CG,OAA7C,EAAsDF,WAAW,CAACQ,MAAlE;AACH;AACJ;AAvBS;AAAA;AAAA;AAAA;AAAA;AAwBb;;;uCACkBxB,Q,EAAU;AACzB,UAAIE,EAAJ,EAAQC,EAAR;;AACA,UAAMvC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMO,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAACA,OAAO,CAACW,MAAT,IAAmBX,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaC,IAAjD,IAAyDf,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAA3F,EAAmG;AAC/F,eAAO,IAAP;AACH;;AACD,UAAI,CAAC,KAAKF,GAAV,EAAe;AACX,cAAM,IAAIkC,KAAJ,CAAUhE,OAAO,CAACiE,SAAR,CAAkBC,cAA5B,CAAN;AACH;;AACD,UAAMC,UAAU,GAAGjE,SAAS,CAACkE,MAAV,CAAiBC,IAApC;AACA,UAAMC,CAAC,GAAG,CAAC9B,EAAE,GAAGF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACgC,CAAnE,MAA0E,IAA1E,IAAkF9B,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuG+B,IAAI,CAACC,MAAL,KAAgBL,UAAU,CAAC9D,KAA5I;AACA,UAAMoE,CAAC,GAAG,CAAChC,EAAE,GAAGH,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACmC,CAAnE,MAA0E,IAA1E,IAAkFhC,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuG8B,IAAI,CAACC,MAAL,KAAgBL,UAAU,CAAC/D,MAA5I;AACA,UAAIsE,MAAM,GAAG,KAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAK9C,GAAL,CAASY,MAAT,GAAkB,CAAtC,EAAyCiC,CAAC,GAAG,KAAK7C,GAAL,CAASY,MAAtD,EAA8DkC,CAAC,GAAGD,CAAC,EAAnE,EAAuE;AACnE,YAAME,EAAE,GAAG,KAAK/C,GAAL,CAAS6C,CAAT,CAAX;AACA,YAAMG,EAAE,GAAG,KAAKhD,GAAL,CAAS8C,CAAT,CAAX;AACA,YAAMG,SAAS,GAAGF,EAAE,CAACJ,CAAH,GAAOA,CAAP,KAAaK,EAAE,CAACL,CAAH,GAAOA,CAApB,IAAyBH,CAAC,GAAI,CAACQ,EAAE,CAACR,CAAH,GAAOO,EAAE,CAACP,CAAX,KAAiBG,CAAC,GAAGI,EAAE,CAACJ,CAAxB,CAAD,IAAgCK,EAAE,CAACL,CAAH,GAAOI,EAAE,CAACJ,CAA1C,IAA+CI,EAAE,CAACP,CAAjG;;AACA,YAAIS,SAAJ,EAAe;AACXL,UAAAA,MAAM,GAAG,CAACA,MAAV;AACH;AACJ;;AACD,aAAOjE,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAamD,MAA9B,GAAuCA,MAAvC,GAAgDjE,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAayD,OAA9B,GAAwC,CAACN,MAAzC,GAAkD,KAAzG;AACH;;;iCACYO,G,EAAKC,K,EAAO;AACrB,UAAI1C,EAAJ,EAAQC,EAAR,EAAY0C,EAAZ;;AACA,UAAMC,aAAa,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAAnE;;AACA,UAAI,KAAKnD,KAAL,KAAesD,SAAf,IAA4B,CAACD,aAAjC,EAAgD;AAC5C,eAAO,KAAKtD,GAAZ;AACH;;AACD,UAAM5B,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMO,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM6E,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBR,GAAvB,EAA4B,eAA5B,CAAZ;AACA,UAAMS,GAAG,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,KAAzB,EAAgC,CAAhC,CAAZ;AACA,UAAIC,QAAQ,GAAGF,GAAG,CAACC,oBAAJ,CAAyB,MAAzB,CAAf;;AACA,UAAI,CAACC,QAAQ,CAAClD,MAAd,EAAsB;AAClBkD,QAAAA,QAAQ,GAAGJ,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAX;AACH;;AACD,WAAK5D,KAAL,GAAa,EAAb;;AACA,WAAK,IAAI4C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,QAAQ,CAAClD,MAA7B,EAAqCiC,CAAC,EAAtC,EAA0C;AACtC,YAAMlB,IAAI,GAAGmC,QAAQ,CAACC,IAAT,CAAclB,CAAd,CAAb;;AACA,YAAIlB,IAAJ,EAAU;AACN,eAAK1B,KAAL,CAAW+D,IAAX,CAAgB;AACZC,YAAAA,OAAO,EAAEtC,IADG;AAEZf,YAAAA,MAAM,EAAEe,IAAI,CAACuC,cAAL;AAFI,WAAhB;AAIH;AACJ;;AACD,UAAMC,OAAO,GAAG/F,SAAS,CAACY,MAAV,CAAiBC,UAAjC;AACA,UAAMmF,KAAK,GAAGzF,OAAO,CAACyF,KAAR,GAAgBD,OAA9B;AACA,WAAK9F,SAAL,CAAeE,KAAf,GAAuB8F,UAAU,CAAC,CAAC3D,EAAE,GAAGkD,GAAG,CAACU,YAAJ,CAAiB,OAAjB,CAAN,MAAqC,IAArC,IAA6C5D,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,GAAnE,CAAV,GAAoF0D,KAA3G;AACA,WAAK/F,SAAL,CAAeC,MAAf,GAAwB+F,UAAU,CAAC,CAAC1D,EAAE,GAAGiD,GAAG,CAACU,YAAJ,CAAiB,QAAjB,CAAN,MAAsC,IAAtC,IAA8C3D,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,GAApE,CAAV,GAAqFyD,KAA7G;AACA,UAAM5D,QAAQ,GAAG,CAAC6C,EAAE,GAAG1E,OAAO,CAAC6B,QAAd,MAA4B,IAA5B,IAAoC6C,EAAE,KAAK,KAAK,CAAhD,GAAoDA,EAApD,GAAyD;AACtEb,QAAAA,CAAC,EAAE,EADmE;AAEtEG,QAAAA,CAAC,EAAE;AAFmE,OAA1E;AAIA,WAAKb,MAAL,GAAc;AACVU,QAAAA,CAAC,EAAGpE,SAAS,CAACkE,MAAV,CAAiBC,IAAjB,CAAsBhE,KAAtB,GAA8BiC,QAAQ,CAACgC,CAAxC,IAA8C,MAAM2B,OAApD,IAA+D,KAAK9F,SAAL,CAAeE,KAAf,GAAuB,CAD/E;AAEVoE,QAAAA,CAAC,EAAGvE,SAAS,CAACkE,MAAV,CAAiBC,IAAjB,CAAsBjE,MAAtB,GAA+BkC,QAAQ,CAACmC,CAAzC,IAA+C,MAAMwB,OAArD,IAAgE,KAAK9F,SAAL,CAAeC,MAAf,GAAwB;AAFjF,OAAd;AAIA,aAAOR,mBAAmB,CAACyG,UAApB,CAA+B,KAAKtE,KAApC,EAA2CmE,KAA3C,EAAkD,KAAKtC,MAAvD,CAAP;AACH;;;oCACe0C,M,EAAQpB,K,EAAO;AAC3B,aAAOrF,OAAO,CAACmB,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCP,gBAAAA,OADqC,GAC3B,KAAKA,OADsB;AAErC8F,gBAAAA,GAFqC,GAE/BD,MAAM,IAAI7F,OAAO,CAAC8F,GAFa;AAGrCnB,gBAAAA,aAHqC,GAGrBF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAHxB;;AAAA,sBAIvC,CAACqB,GAAD,IAAS,KAAKxE,KAAL,KAAesD,SAAf,IAA4B,CAACD,aAJC;AAAA;AAAA;AAAA;;AAAA,kDAKhC,KAAKtD,GAL2B;;AAAA;AAAA;AAO/B,uBAAM0E,KAAK,CAACD,GAAD,CAAX;;AAP+B;AAOrCE,gBAAAA,GAPqC;;AAAA,oBAQtCA,GAAG,CAACC,EARkC;AAAA;AAAA;AAAA;;AAAA,sBASjC,IAAI1C,KAAJ,CAAU,iEAAV,CATiC;;AAAA;AAAA,+BAWpC,IAXoC;AAAA;AAWlB,uBAAMyC,GAAG,CAACE,IAAJ,EAAN;;AAXkB;AAAA;AAAA,+BAWAzB,KAXA;AAAA,+DAW/B0B,YAX+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxC,EAAP;AAaH;;;iCACY;AACT,UAAI,CAAC,KAAK9E,GAAV,EAAe;AACX;AACH;;AAHQ,kDAIU,KAAKA,GAJf;AAAA;;AAAA;AAIT,+DAA6B;AAAA,cAAlB+D,IAAkB;AACzB,eAAK3F,SAAL,CAAe0B,SAAf,CAAyBiF,WAAzB,CAAqC;AACjCvC,YAAAA,CAAC,EAAEuB,IAAI,CAACvB,CADyB;AAEjCG,YAAAA,CAAC,EAAEoB,IAAI,CAACpB;AAFyB,WAArC;AAIH;AATQ;AAAA;AAAA;AAAA;AAAA;AAUZ;;;kCACa;AACV,UAAMvE,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMO,OAAO,GAAG,KAAKA,OAArB;AACA,UAAI6B,QAAJ;;AACA,UAAI7B,OAAO,CAACa,IAAR,KAAiBvB,OAAO,CAACwB,IAAR,CAAaS,MAAlC,EAA0C;AACtC,gBAAQvB,OAAO,CAACuB,MAAR,CAAeC,WAAvB;AACI,eAAKlC,OAAO,CAACmC,iBAAR,CAA0BY,WAA/B;AACIR,YAAAA,QAAQ,GAAG,KAAKwE,cAAL,EAAX;AACA;;AACJ,eAAK/G,OAAO,CAACmC,iBAAR,CAA0B6E,YAA/B;AACIzE,YAAAA,QAAQ,GAAG,KAAK0E,sBAAL,EAAX;AACA;;AACJ,eAAKjH,OAAO,CAACmC,iBAAR,CAA0B+E,WAA/B;AACI3E,YAAAA,QAAQ,GAAG,KAAK4E,0BAAL,CAAgChH,SAAS,CAAC0B,SAAV,CAAoBuF,KAApD,CAAX;AACA;;AACJ,eAAKpH,OAAO,CAACmC,iBAAR,CAA0BC,WAA/B;AACA,eAAKpC,OAAO,CAACmC,iBAAR,CAA0BE,QAA/B;AACA;AACIE,YAAAA,QAAQ,GAAG,KAAK8E,eAAL,CAAqBlH,SAAS,CAAC0B,SAAV,CAAoBuF,KAAzC,CAAX;AAbR;AAeH,OAhBD,MAiBK;AACD7E,QAAAA,QAAQ,GAAG;AACPgC,UAAAA,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgBtE,SAAS,CAACkE,MAAV,CAAiBC,IAAjB,CAAsBhE,KADlC;AAEPoE,UAAAA,CAAC,EAAEF,IAAI,CAACC,MAAL,KAAgBtE,SAAS,CAACkE,MAAV,CAAiBC,IAAjB,CAAsBjE;AAFlC,SAAX;AAIH;;AACD,UAAI,KAAK4C,kBAAL,CAAwBV,QAAxB,CAAJ,EAAuC;AACnC,eAAOA,QAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAKQ,WAAL,EAAP;AACH;AACJ;;;qCACgB;AACb,UAAI,CAAC,KAAKhB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASY,MAA3B,EAAmC;AAC/B,cAAM,IAAIsB,KAAJ,CAAUhE,OAAO,CAACiE,SAAR,CAAkBoD,mBAA5B,CAAN;AACH;;AACD,UAAMC,MAAM,GAAGtH,OAAO,CAAC4C,KAAR,CAAc2E,aAAd,CAA4B,KAAKzF,GAAjC,CAAf;AACA,aAAO;AACHwC,QAAAA,CAAC,EAAEgD,MAAM,CAAChD,CADP;AAEHG,QAAAA,CAAC,EAAE6C,MAAM,CAAC7C;AAFP,OAAP;AAIH;;;6CACwB;AACrB,UAAIjC,EAAJ,EAAQC,EAAR,EAAY0C,EAAZ;;AACA,UAAM1E,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAAC,KAAKqB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASY,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAKT,KAAX,MAAsB,IAAtB,IAA8BS,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EAA0G;AACtG,cAAM,IAAIsB,KAAJ,CAAUhE,OAAO,CAACiE,SAAR,CAAkBoD,mBAA5B,CAAN;AACH;;AACD,UAAM5D,IAAI,GAAGzD,OAAO,CAAC4C,KAAR,CAAc2E,aAAd,CAA4B,KAAKxF,KAAjC,CAAb;AACA,UAAMyF,QAAQ,GAAGjD,IAAI,CAACkD,KAAL,CAAWlD,IAAI,CAACC,MAAL,KAAgBf,IAAI,CAACf,MAAhC,IAA0C,CAA3D;AACA,UAAMgF,KAAK,GAAGjE,IAAI,CAACsC,OAAL,CAAa4B,gBAAb,CAA8BH,QAA9B,CAAd;AACA,aAAO;AACHlD,QAAAA,CAAC,EAAEoD,KAAK,CAACpD,CAAN,GAAU7D,OAAO,CAACyF,KAAlB,IAA2B,CAAC,CAACzD,EAAE,GAAG,KAAKmB,MAAX,MAAuB,IAAvB,IAA+BnB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC6B,CAA5D,KAAkE,CAA7F,CADA;AAEHG,QAAAA,CAAC,EAAEiD,KAAK,CAACjD,CAAN,GAAUhE,OAAO,CAACyF,KAAlB,IAA2B,CAAC,CAACf,EAAE,GAAG,KAAKvB,MAAX,MAAuB,IAAvB,IAA+BuB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACV,CAA5D,KAAkE,CAA7F;AAFA,OAAP;AAIH;;;+CAC0BmD,K,EAAO;AAC9B,UAAIpF,EAAJ,EAAQC,EAAR,EAAY0C,EAAZ,EAAgB0C,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;;AACA,UAAMvH,OAAO,GAAG,KAAKP,SAAL,CAAeO,OAA/B;AACA,UAAMU,kBAAkB,GAAG,KAAKV,OAAhC;AACA,UAAI,CAAC,KAAKqB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASY,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAKT,KAAX,MAAsB,IAAtB,IAA8BS,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EACI,MAAM,IAAIsB,KAAJ,CAAUhE,OAAO,CAACiE,SAAR,CAAkBoD,mBAA5B,CAAN;AACJ,UAAIzD,MAAM,GAAG,CAAb;AACA,UAAI8D,KAAJ;AACA,UAAMO,WAAW,GAAG,KAAKlG,KAAL,CAAWmG,MAAX,CAAkB,UAACC,GAAD,EAAM1E,IAAN;AAAA,eAAe0E,GAAG,GAAG1E,IAAI,CAACf,MAA1B;AAAA,OAAlB,EAAoD,CAApD,CAApB;AACA,UAAM8E,QAAQ,GAAGS,WAAW,GAAGxH,OAAO,CAACmB,SAAR,CAAkBwG,MAAlB,CAAyBzI,KAAxD;;AAT8B,kDAUX,KAAKoC,KAVM;AAAA;;AAAA;AAU9B,+DAA+B;AAAA,cAApB0B,IAAoB;AAC3B,cAAM4E,YAAY,GAAGb,QAAQ,GAAGI,KAAX,GAAmBhE,MAAxC;;AACA,cAAIyE,YAAY,IAAI5E,IAAI,CAACf,MAAzB,EAAiC;AAC7BgF,YAAAA,KAAK,GAAGjE,IAAI,CAACsC,OAAL,CAAa4B,gBAAb,CAA8BU,YAA9B,CAAR;AACA;AACH,WAHD,MAIK;AACDzE,YAAAA,MAAM,IAAIH,IAAI,CAACf,MAAf;AACH;AACJ;AAnB6B;AAAA;AAAA;AAAA;AAAA;;AAoB9B,aAAO;AACH4B,QAAAA,CAAC,EAAE,CAAC,CAAC7B,EAAE,GAAGiF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACpD,CAA1D,MAAiE,IAAjE,IAAyE7B,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoGtB,kBAAkB,CAAC+E,KAAvH,IAAgI,CAAC2B,EAAE,GAAG,CAAC1C,EAAE,GAAG,KAAKvB,MAAX,MAAuB,IAAvB,IAA+BuB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACb,CAAjE,MAAwE,IAAxE,IAAgFuD,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO,CADA;AAEHpD,QAAAA,CAAC,EAAE,CAAC,CAACqD,EAAE,GAAGJ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACjD,CAA1D,MAAiE,IAAjE,IAAyEqD,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoG3G,kBAAkB,CAAC+E,KAAvH,IAAgI,CAAC8B,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKnE,MAAX,MAAuB,IAAvB,IAA+BmE,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACtD,CAAjE,MAAwE,IAAxE,IAAgFuD,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO;AAFA,OAAP;AAIH;;;oCACeJ,K,EAAO;AACnB,UAAI,CAAC,KAAK9F,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASY,MAA3B,EAAmC;AAC/B,cAAM,IAAIsB,KAAJ,CAAUhE,OAAO,CAACiE,SAAR,CAAkBoD,mBAA5B,CAAN;AACH;;AACD,UAAMC,MAAM,GAAG,KAAKxF,GAAL,CAAS8F,KAAK,GAAG,KAAK9F,GAAL,CAASY,MAA1B,CAAf;AACA,aAAO;AACH4B,QAAAA,CAAC,EAAEgD,MAAM,CAAChD,CADP;AAEHG,QAAAA,CAAC,EAAE6C,MAAM,CAAC7C;AAFP,OAAP;AAIH;;;mCACc;AAAA;;AACX,UAAIjC,EAAJ,EAAQC,EAAR;;AACA,UAAMhC,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAAC,KAAKH,eAAN,IAAyB,EAAE,CAACkC,EAAE,GAAG,KAAKT,KAAX,MAAsB,IAAtB,IAA8BS,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAA7B,EAAkG;AAC9F;AACH;;AALU,kDAMQ,KAAKX,KANb;AAAA;;AAAA;AAAA;AAAA,cAMA0B,IANA;AAOP,cAAM6E,QAAQ,GAAG,CAAC7F,EAAE,GAAGgB,IAAI,CAACsC,OAAX,MAAwB,IAAxB,IAAgCtD,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAAC2D,YAAH,CAAgB,GAAhB,CAA1E;;AACA,cAAIkC,QAAJ,EAAc;AACV,gBAAM5E,MAAM,GAAG,IAAIlD,MAAJ,CAAW8H,QAAX,CAAf;AACA,gBAAMC,MAAM,GAAGC,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,EAA8DC,eAA9D,EAAf;AACA,gBAAMC,SAAS,GAAG,IAAInI,MAAJ,EAAlB;AACA,gBAAMoI,SAAS,GAAGL,MAAM,CAACrC,KAAP,CAAazF,OAAO,CAACyF,KAArB,CAAlB;;AACA,gBAAIyC,SAAS,CAACE,OAAd,EAAuB;AACnBF,cAAAA,SAAS,CAACE,OAAV,CAAkBnF,MAAlB,EAA0BkF,SAA1B;AACAnF,cAAAA,IAAI,CAACC,MAAL,GAAciF,SAAd;AACH,aAHD,MAIK;AACD,qBAAOlF,IAAI,CAACC,MAAZ;AACH;AACJ,WAZD,MAaK;AACD,mBAAOD,IAAI,CAACC,MAAZ;AACH;;AACD,cAAID,IAAI,CAACC,MAAL,IAAe,CAAC,MAAI,CAAC5B,GAAzB,EAA8B;AAC1B;AACH;;AACD2B,UAAAA,IAAI,CAACC,MAAL,GAAc,IAAIlD,MAAJ,EAAd;AACAiD,UAAAA,IAAI,CAACC,MAAL,CAAYoF,MAAZ,CAAmB,MAAI,CAAChH,GAAL,CAAS,CAAT,EAAYwC,CAA/B,EAAkC,MAAI,CAACxC,GAAL,CAAS,CAAT,EAAY2C,CAA9C;;AACA,UAAA,MAAI,CAAC3C,GAAL,CAASiH,OAAT,CAAiB,UAACpG,GAAD,EAAMgC,CAAN,EAAY;AACzB,gBAAInC,EAAJ;;AACA,gBAAImC,CAAC,GAAG,CAAR,EAAW;AACP,eAACnC,EAAE,GAAGiB,IAAI,CAACC,MAAX,MAAuB,IAAvB,IAA+BlB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACwG,MAAH,CAAUrG,GAAG,CAAC2B,CAAd,EAAiB3B,GAAG,CAAC8B,CAArB,CAAxD;AACH;AACJ,WALD;;AAMAhB,UAAAA,IAAI,CAACC,MAAL,CAAYuF,SAAZ;AAnCO;;AAMX,+DAA+B;AAAA;;AAAA,mCAmBvB;AAWP;AApCU;AAAA;AAAA;AAAA;AAAA;AAqCd;;;gCACW/D,K,EAAO;AACf,aAAOrF,OAAO,CAACmB,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCP,gBAAAA,OADqC,GAC3B,KAAKA,OADsB;;AAAA,qBAEvCA,OAAO,CAAC8F,GAF+B;AAAA;AAAA;AAAA;;AAAA;AAG5B,uBAAM,KAAK2C,eAAL,CAAqBzI,OAAO,CAAC8F,GAA7B,EAAkCrB,KAAlC,CAAN;;AAH4B;AAGvC,qBAAKpD,GAHkC;AAAA;AAAA;;AAAA;AAKtC,oBAAIrB,OAAO,CAAC0I,IAAZ,EAAkB;AACbA,kBAAAA,IADa,GACN1I,OAAO,CAAC0I,IADF;;AAGnB,sBAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACpB1F,oBAAAA,IADoB,GACb0F,IAAI,CAAC1F,IAAL,YAAqB2F,KAArB,GACPD,IAAI,CAAC1F,IAAL,CAAU4F,GAAV,CAAc,UAACC,CAAD;AAAA,iDAAmBA,CAAnB;AAAA,qBAAd,EAA0CC,IAA1C,CAA+C,EAA/C,CADO,uBAEKJ,IAAI,CAAC1F,IAFV,UADa;AAIpB+F,oBAAAA,UAJoB,GAIP,+EAJO;AAK1B9D,oBAAAA,GAAG,kBAAW8D,UAAX,sBAAgCL,IAAI,CAAC9E,IAAL,CAAUhE,KAA1C,yBAA4D8I,IAAI,CAAC9E,IAAL,CAAUjE,MAAtE,gBAAiFqD,IAAjF,WAAH;AACH,mBAND,MAOK;AACDiC,oBAAAA,GAAG,GAAGyD,IAAN;AACH;;AACD,uBAAKrH,GAAL,GAAW,KAAK8E,YAAL,CAAkBlB,GAAlB,EAAuBR,KAAvB,CAAX;AACH;;AAnB0C;AAoB3C,qBAAKuE,YAAL;;AApB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxC,EAAP;AAsBH;;;kCAjboBlH,Q,EAAU;AAC3BA,MAAAA,QAAQ,CAACmH,QAAT,CAAkBC,UAAlB,GAA+BpH,QAAQ,CAACmH,QAAT,CAAkBE,QAAlB,GAA6B,CAA7B,GAAiCrH,QAAQ,CAACmH,QAAT,CAAkBC,UAAlF;AACApH,MAAAA,QAAQ,CAACmH,QAAT,CAAkBE,QAAlB,GAA6BrH,QAAQ,CAACmH,QAAT,CAAkBC,UAAlB,GAA+B,CAA/B,GAAmCpH,QAAQ,CAACmH,QAAT,CAAkBE,QAAlF;AACH;;;oCACsBvG,O,EAASG,O,EAASM,M,EAAQ;AAC7C,UAAM+F,KAAK,GAAG7J,OAAO,CAAC8J,UAAR,CAAmBC,UAAnB,CAA8BjG,MAAM,CAAC+F,KAArC,CAAd;;AACA,UAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDxG,MAAAA,OAAO,CAAC2G,SAAR;AACA3G,MAAAA,OAAO,CAACyF,MAAR,CAAetF,OAAO,CAAC,CAAD,CAAP,CAAWc,CAA1B,EAA6Bd,OAAO,CAAC,CAAD,CAAP,CAAWiB,CAAxC;;AAN6C,kDAO1BjB,OAP0B;AAAA;;AAAA;AAO7C,+DAA4B;AAAA,cAAjBqC,IAAiB;AACxBxC,UAAAA,OAAO,CAAC2F,MAAR,CAAenD,IAAI,CAACvB,CAApB,EAAuBuB,IAAI,CAACpB,CAA5B;AACH;AAT4C;AAAA;AAAA;AAAA;AAAA;;AAU7CpB,MAAAA,OAAO,CAAC4F,SAAR;AACA5F,MAAAA,OAAO,CAAC4G,WAAR,GAAsBjK,OAAO,CAAC8J,UAAR,CAAmBI,eAAnB,CAAmCL,KAAnC,CAAtB;AACAxG,MAAAA,OAAO,CAAC8G,SAAR,GAAoBrG,MAAM,CAACzD,KAA3B;AACAgD,MAAAA,OAAO,CAACS,MAAR;AACH;;;wCAC0BT,O,EAASI,I,EAAMK,M,EAAQxB,Q,EAAU;AACxDe,MAAAA,OAAO,CAAC+G,SAAR,CAAkB9H,QAAQ,CAACgC,CAA3B,EAA8BhC,QAAQ,CAACmC,CAAvC;AACA,UAAMoF,KAAK,GAAG7J,OAAO,CAAC8J,UAAR,CAAmBC,UAAnB,CAA8BjG,MAAM,CAAC+F,KAArC,CAAd;;AACA,UAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDxG,MAAAA,OAAO,CAAC4G,WAAR,GAAsBjK,OAAO,CAAC8J,UAAR,CAAmBI,eAAnB,CAAmCL,KAAnC,EAA0C/F,MAAM,CAACuG,OAAjD,CAAtB;AACAhH,MAAAA,OAAO,CAAC8G,SAAR,GAAoBrG,MAAM,CAACzD,KAA3B;AACAgD,MAAAA,OAAO,CAACS,MAAR,CAAeL,IAAf;AACH;;;+BACiB1B,K,EAAOmE,K,EAAOtC,M,EAAQ;AACpC,UAAM0G,GAAG,GAAG,EAAZ;;AADoC,kDAEjBvI,KAFiB;AAAA;;AAAA;AAEpC,+DAA0B;AAAA,cAAf0B,IAAe;AACtB,cAAM8G,QAAQ,GAAG9G,IAAI,CAACsC,OAAL,CAAayE,WAA9B;AACA,cAAMC,GAAG,GAAGF,QAAQ,CAACG,aAArB;AACA,cAAMC,CAAC,GAAG;AACNrG,YAAAA,CAAC,EAAE,CADG;AAENG,YAAAA,CAAC,EAAE;AAFG,WAAV;;AAIA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8F,GAApB,EAAyB9F,CAAC,EAA1B,EAA8B;AAC1B,gBAAMiG,OAAO,GAAGL,QAAQ,CAACM,OAAT,CAAiBlG,CAAjB,CAAhB;AACA,gBAAMmG,UAAU,GAAGvK,MAAM,CAACwK,UAA1B;;AACA,oBAAQH,OAAO,CAACI,WAAhB;AACI,mBAAKF,UAAU,CAACG,kBAAhB;AACA,mBAAKH,UAAU,CAACI,kBAAhB;AACA,mBAAKJ,UAAU,CAACK,yBAAhB;AACA,mBAAKL,UAAU,CAACM,6BAAhB;AACA,mBAAKN,UAAU,CAACO,eAAhB;AACA,mBAAKP,UAAU,CAACQ,gCAAhB;AACA,mBAAKR,UAAU,CAACS,oCAAhB;AAAsD;AAClD,sBAAMC,MAAM,GAAGZ,OAAf;AACAD,kBAAAA,CAAC,CAACrG,CAAF,GAAMkH,MAAM,CAAClH,CAAb;AACAqG,kBAAAA,CAAC,CAAClG,CAAF,GAAM+G,MAAM,CAAC/G,CAAb;AACA;AACH;;AACD,mBAAKqG,UAAU,CAACW,6BAAhB;AACId,gBAAAA,CAAC,CAACrG,CAAF,GAAMsG,OAAO,CAACtG,CAAd;AACA;;AACJ,mBAAKwG,UAAU,CAACY,2BAAhB;AACIf,gBAAAA,CAAC,CAAClG,CAAF,GAAMmG,OAAO,CAACnG,CAAd;AACA;;AACJ,mBAAKqG,UAAU,CAACa,kBAAhB;AACA,mBAAKb,UAAU,CAACc,kBAAhB;AACA,mBAAKd,UAAU,CAACe,yBAAhB;AACA,mBAAKf,UAAU,CAACgB,6BAAhB;AACA,mBAAKhB,UAAU,CAACiB,eAAhB;AACA,mBAAKjB,UAAU,CAACkB,gCAAhB;AACA,mBAAKlB,UAAU,CAACmB,oCAAhB;AAAsD;AAClD,sBAAMC,MAAM,GAAGtB,OAAf;AACAD,kBAAAA,CAAC,CAACrG,CAAF,IAAO4H,MAAM,CAAC5H,CAAd;AACAqG,kBAAAA,CAAC,CAAClG,CAAF,IAAOyH,MAAM,CAACzH,CAAd;AACA;AACH;;AACD,mBAAKqG,UAAU,CAACqB,6BAAhB;AACIxB,gBAAAA,CAAC,CAACrG,CAAF,IAAOsG,OAAO,CAACtG,CAAf;AACA;;AACJ,mBAAKwG,UAAU,CAACsB,2BAAhB;AACIzB,gBAAAA,CAAC,CAAClG,CAAF,IAAOmG,OAAO,CAACnG,CAAf;AACA;;AACJ,mBAAKqG,UAAU,CAACuB,eAAhB;AACA,mBAAKvB,UAAU,CAACwB,iBAAhB;AACI;AAvCR;;AAyCAhC,YAAAA,GAAG,CAACxE,IAAJ,CAAS;AACLxB,cAAAA,CAAC,EAAEqG,CAAC,CAACrG,CAAF,GAAM4B,KAAN,GAActC,MAAM,CAACU,CADnB;AAELG,cAAAA,CAAC,EAAEkG,CAAC,CAAClG,CAAF,GAAMyB,KAAN,GAActC,MAAM,CAACa;AAFnB,aAAT;AAIH;AACJ;AA1DmC;AAAA;AAAA;AAAA;AAAA;;AA2DpC,aAAO6F,GAAP;AACH;;;;;;AA0VL5K,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst tslib_1 = require(\"tslib\");\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    static polygonBounce(particle) {\n        particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n        particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n    }\n    static drawPolygonMask(context, rawData, stroke) {\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.beginPath();\n        context.moveTo(rawData[0].x, rawData[0].y);\n        for (const item of rawData) {\n            context.lineTo(item.x, item.y);\n        }\n        context.closePath();\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n        context.lineWidth = stroke.width;\n        context.stroke();\n    }\n    static drawPolygonMaskPath(context, path, stroke, position) {\n        context.translate(position.x, position.y);\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n        context.lineWidth = stroke.width;\n        context.stroke(path);\n    }\n    static parsePaths(paths, scale, offset) {\n        const res = [];\n        for (const path of paths) {\n            const segments = path.element.pathSegList;\n            const len = segments.numberOfItems;\n            const p = {\n                x: 0,\n                y: 0,\n            };\n            for (let i = 0; i < len; i++) {\n                const segment = segments.getItem(i);\n                const svgPathSeg = window.SVGPathSeg;\n                switch (segment.pathSegType) {\n                    case svgPathSeg.PATHSEG_MOVETO_ABS:\n                    case svgPathSeg.PATHSEG_LINETO_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                    case svgPathSeg.PATHSEG_ARC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                        const absSeg = segment;\n                        p.x = absSeg.x;\n                        p.y = absSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                        p.x = segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                        p.y = segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_REL:\n                    case svgPathSeg.PATHSEG_MOVETO_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                    case svgPathSeg.PATHSEG_ARC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                        const relSeg = segment;\n                        p.x += relSeg.x;\n                        p.y += relSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                        p.x += segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                        p.y += segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_UNKNOWN:\n                    case svgPathSeg.PATHSEG_CLOSEPATH:\n                        continue;\n                }\n                res.push({\n                    x: p.x * scale + offset.x,\n                    y: p.y * scale + offset.y,\n                });\n            }\n        }\n        return res;\n    }\n    initAsync(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position, particle) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        const pos = Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n        if (options.type === Enums_1.Type.inline && particle) {\n            particle.initialPosition = pos;\n        }\n        return pos;\n    }\n    particleBounce(particle) {\n        const options = this.options;\n        if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n            if (!this.checkInsidePolygon(particle.getPosition())) {\n                PolygonMaskInstance.polygonBounce(particle);\n                return true;\n            }\n        }\n        else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                PolygonMaskInstance.polygonBounce(particle);\n                return true;\n            }\n        }\n        return false;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                PolygonMaskInstance.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                PolygonMaskInstance.drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return PolygonMaskInstance.parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.Utils.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.options;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}