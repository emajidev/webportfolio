{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Collider = /*#__PURE__*/function () {\n  function Collider(container) {\n    _classCallCheck(this, Collider);\n\n    this.container = container;\n  }\n\n  _createClass(Collider, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.particlesOptions.collisions.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact(p1) {\n      var container = this.container;\n      var pos1 = p1.getPosition();\n      var query = container.particles.quadTree.query(new Utils_1.Circle(pos1.x, pos1.y, p1.size.value * 2));\n\n      var _iterator = _createForOfIteratorHelper(query),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p2 = _step.value;\n\n          if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n            continue;\n          }\n\n          var pos2 = p2.getPosition();\n          var dist = Utils_1.Utils.getDistance(pos1, pos2);\n          var defaultSize = container.retina.sizeValue;\n          var radius1 = Collider.getRadius(p1, defaultSize);\n          var radius2 = Collider.getRadius(p2, defaultSize);\n          var distP = radius1 + radius2;\n\n          if (dist <= distP) {\n            this.resolveCollision(p1, p2);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"resolveCollision\",\n    value: function resolveCollision(p1, p2) {\n      switch (p1.particlesOptions.collisions.mode) {\n        case Enums_1.CollisionMode.absorb:\n          {\n            this.absorb(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.bounce:\n          {\n            Collider.bounce(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.destroy:\n          {\n            Collider.destroy(p1, p2);\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"absorb\",\n    value: function absorb(p1, p2) {\n      var container = this.container;\n      var fps = container.options.fpsLimit / 1000;\n\n      if (p1.size.value === undefined && p2.size.value !== undefined) {\n        p1.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n        p2.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n        if (p1.size.value >= p2.size.value) {\n          var factor = Utils_1.Utils.clamp(p1.size.value / p2.size.value, 0, p2.size.value) * fps;\n          p1.size.value += factor;\n          p2.size.value -= factor;\n\n          if (p2.size.value <= container.retina.pixelRatio) {\n            p2.size.value = 0;\n            p2.destroy();\n          }\n        } else {\n          var _factor = Utils_1.Utils.clamp(p2.size.value / p1.size.value, 0, p1.size.value) * fps;\n\n          p1.size.value -= _factor;\n          p2.size.value += _factor;\n\n          if (p1.size.value <= container.retina.pixelRatio) {\n            p1.size.value = 0;\n            p1.destroy();\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"rotate\",\n    value: function rotate(velocity, angle) {\n      return {\n        horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n        vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n      };\n    }\n  }, {\n    key: \"collisionVelocity\",\n    value: function collisionVelocity(v1, v2, m1, m2) {\n      return {\n        horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n        vertical: v1.vertical\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(p1, p2) {\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n      var yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n      var xDist = pos2.x - pos1.x;\n      var yDist = pos2.y - pos1.y;\n\n      if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n        var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n        var m1 = p1.size.value;\n        var m2 = p2.size.value;\n        var u1 = Collider.rotate(p1.velocity, angle);\n        var u2 = Collider.rotate(p2.velocity, angle);\n        var v1 = Collider.collisionVelocity(u1, u2, m1, m2);\n        var v2 = Collider.collisionVelocity(u2, u1, m1, m2);\n        var vFinal1 = Collider.rotate(v1, -angle);\n        var vFinal2 = Collider.rotate(v2, -angle);\n        p1.velocity.horizontal = vFinal1.horizontal;\n        p1.velocity.vertical = vFinal1.vertical;\n        p2.velocity.horizontal = vFinal2.horizontal;\n        p2.velocity.vertical = vFinal2.vertical;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(p1, p2) {\n      if (p1.size.value === undefined && p2.size.value !== undefined) {\n        p1.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value === undefined) {\n        p2.destroy();\n      } else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n        if (p1.size.value >= p2.size.value) {\n          p2.destroy();\n        } else {\n          p1.destroy();\n        }\n      }\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius(particle, fallback) {\n      return particle.bubble.radius || particle.size.value || fallback;\n    }\n  }]);\n\n  return Collider;\n}();\n\nexports.Collider = Collider;","map":{"version":3,"sources":["/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/tsparticles/dist/Core/Particle/Interactions/Particles/Collider.js"],"names":["Object","defineProperty","exports","value","Collider","Utils_1","require","Enums_1","container","particle","particlesOptions","collisions","enable","p1","pos1","getPosition","query","particles","quadTree","Circle","x","y","size","p2","mode","pos2","dist","Utils","getDistance","defaultSize","retina","sizeValue","radius1","getRadius","radius2","distP","resolveCollision","CollisionMode","absorb","bounce","destroy","fps","options","fpsLimit","undefined","factor","clamp","pixelRatio","velocity","angle","horizontal","Math","cos","vertical","sin","v1","v2","m1","m2","xVelocityDiff","yVelocityDiff","xDist","yDist","atan2","u1","rotate","u2","collisionVelocity","vFinal1","vFinal2","fallback","bubble","radius"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collider = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nconst Enums_1 = require(\"../../../../Enums\");\nclass Collider {\n    constructor(container) {\n        this.container = container;\n    }\n    static rotate(velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    }\n    static collisionVelocity(v1, v2, m1, m2) {\n        return {\n            horizontal: (v1.horizontal * (m1 - m2)) / (m1 + m2) + (v2.horizontal * 2 * m2) / (m1 + m2),\n            vertical: v1.vertical,\n        };\n    }\n    static bounce(p1, p2) {\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n        const yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n        const xDist = pos2.x - pos1.x;\n        const yDist = pos2.y - pos1.y;\n        if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n            const angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n            const m1 = p1.size.value;\n            const m2 = p2.size.value;\n            const u1 = Collider.rotate(p1.velocity, angle);\n            const u2 = Collider.rotate(p2.velocity, angle);\n            const v1 = Collider.collisionVelocity(u1, u2, m1, m2);\n            const v2 = Collider.collisionVelocity(u2, u1, m1, m2);\n            const vFinal1 = Collider.rotate(v1, -angle);\n            const vFinal2 = Collider.rotate(v2, -angle);\n            p1.velocity.horizontal = vFinal1.horizontal;\n            p1.velocity.vertical = vFinal1.vertical;\n            p2.velocity.horizontal = vFinal2.horizontal;\n            p2.velocity.vertical = vFinal2.vertical;\n        }\n    }\n    static destroy(p1, p2) {\n        if (p1.size.value === undefined && p2.size.value !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.size.value !== undefined && p2.size.value === undefined) {\n            p2.destroy();\n        }\n        else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n            if (p1.size.value >= p2.size.value) {\n                p2.destroy();\n            }\n            else {\n                p1.destroy();\n            }\n        }\n    }\n    static getRadius(particle, fallback) {\n        return particle.bubble.radius || particle.size.value || fallback;\n    }\n    isEnabled(particle) {\n        return particle.particlesOptions.collisions.enable;\n    }\n    reset() {\n    }\n    interact(p1) {\n        const container = this.container;\n        const pos1 = p1.getPosition();\n        const query = container.particles.quadTree.query(new Utils_1.Circle(pos1.x, pos1.y, p1.size.value * 2));\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.particlesOptions.collisions.enable ||\n                p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            const dist = Utils_1.Utils.getDistance(pos1, pos2);\n            const defaultSize = container.retina.sizeValue;\n            const radius1 = Collider.getRadius(p1, defaultSize);\n            const radius2 = Collider.getRadius(p2, defaultSize);\n            const distP = radius1 + radius2;\n            if (dist <= distP) {\n                this.resolveCollision(p1, p2);\n            }\n        }\n    }\n    resolveCollision(p1, p2) {\n        switch (p1.particlesOptions.collisions.mode) {\n            case Enums_1.CollisionMode.absorb: {\n                this.absorb(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.bounce: {\n                Collider.bounce(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.destroy: {\n                Collider.destroy(p1, p2);\n                break;\n            }\n        }\n    }\n    absorb(p1, p2) {\n        const container = this.container;\n        const fps = container.options.fpsLimit / 1000;\n        if (p1.size.value === undefined && p2.size.value !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.size.value !== undefined && p2.size.value === undefined) {\n            p2.destroy();\n        }\n        else if (p1.size.value !== undefined && p2.size.value !== undefined) {\n            if (p1.size.value >= p2.size.value) {\n                const factor = Utils_1.Utils.clamp(p1.size.value / p2.size.value, 0, p2.size.value) * fps;\n                p1.size.value += factor;\n                p2.size.value -= factor;\n                if (p2.size.value <= container.retina.pixelRatio) {\n                    p2.size.value = 0;\n                    p2.destroy();\n                }\n            }\n            else {\n                const factor = Utils_1.Utils.clamp(p2.size.value / p1.size.value, 0, p1.size.value) * fps;\n                p1.size.value -= factor;\n                p2.size.value += factor;\n                if (p1.size.value <= container.retina.pixelRatio) {\n                    p1.size.value = 0;\n                    p1.destroy();\n                }\n            }\n        }\n    }\n}\nexports.Collider = Collider;\n"]},"metadata":{},"sourceType":"script"}