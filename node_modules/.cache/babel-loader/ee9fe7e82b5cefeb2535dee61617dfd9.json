{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      var options = this.container.options;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var trail = options.particles.move.trail;\n      var coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n      this.coverColor = coverRgb !== undefined ? {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      } : undefined;\n      this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas, generatedCanvas) {\n      var _a;\n\n      if (!canvas.className) {\n        canvas.className = Utils_1.Constants.canvasClass;\n      }\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n      this.element = canvas;\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      this.element.width = this.size.width;\n      this.element.height = this.size.height;\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var options = this.container.options;\n\n      if (!this.context) {\n        return;\n      }\n\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n      } else {\n        this.paintBase();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var options = this.container.options;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else if (this.context) {\n        Utils_1.CanvasUtils.clear(this.context, this.size);\n      }\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link1.destination;\n      var p3 = link2.destination;\n      var triangleOptions = p1.particlesOptions.links.triangles;\n      var opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var pos3 = p3.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = p1.getFillColor();\n          var destColor = p2.getFillColor();\n\n          if (sourceColor && destColor) {\n            colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorTriangle = linkColor;\n        }\n      }\n\n      var width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var _a, _b, _c;\n\n      var container = this.container;\n      var options = container.options;\n      var p2 = link.destination;\n      var opacity = link.opacity;\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var colorLine;\n      var twinkle = p1.particlesOptions.twinkle.lines;\n\n      if (twinkle.enable) {\n        var twinkleFreq = twinkle.frequency;\n        var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        var twinkling = Math.random() < twinkleFreq;\n\n        if (twinkling && twinkleRgb !== undefined) {\n          colorLine = twinkleRgb;\n          opacity = twinkle.opacity;\n        }\n      }\n\n      if (!colorLine) {\n        var linksOptions = p1.particlesOptions.links;\n        var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n        if (linkColor === Utils_1.Constants.randomColorValue) {\n          colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n        } else if (linkColor === \"mid\") {\n          var sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n          var destColor = (_b = p2.getFillColor()) !== null && _b !== void 0 ? _b : p2.getStrokeColor();\n\n          if (sourceColor && destColor) {\n            colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n            if (!hslColor) {\n              return;\n            }\n\n            colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n          }\n        } else {\n          colorLine = linkColor;\n        }\n      }\n\n      var width = (_c = p1.linksWidth) !== null && _c !== void 0 ? _c : container.retina.linksWidth;\n      Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _a;\n\n      var lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      var ctx = this.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var pos1 = p1.getPosition();\n      var pos2 = p2.getPosition();\n      Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var _a;\n\n      var container = this.container;\n      var ctx = container.canvas.context;\n\n      if (!ctx) {\n        return;\n      }\n\n      var beginPos = particle.getPosition();\n      Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this = this;\n\n      var _a, _b, _c, _d, _e;\n\n      if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor();\n\n      if (pfColor === undefined) {\n        return;\n      }\n\n      var psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n      var options = this.container.options;\n      var twinkle = particle.particlesOptions.twinkle.particles;\n      var twinkleFreq = twinkle.frequency;\n      var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      var twinkling = twinkle.enable && Math.random() < twinkleFreq;\n      var radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n      var opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n      var infectionStage = particle.infecter.infectionStage;\n      var infection = options.infection;\n      var infectionStages = infection.stages;\n      var infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n      var infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n      var fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n      var sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n      var fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n      if (!this.context || !fillColorValue) {\n        return;\n      }\n\n      var strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity) : fillColorValue;\n\n      if (particle.links.length > 0) {\n        this.context.save();\n\n        var _iterator = _createForOfIteratorHelper(particle.links),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var link = _step.value;\n\n            if (particle.particlesOptions.links.triangles.enable) {\n              (function () {\n                var links = particle.links.map(function (l) {\n                  return l.destination;\n                });\n                var vertices = link.destination.links.filter(function (t) {\n                  return links.indexOf(t.destination) >= 0;\n                });\n\n                if (vertices.length) {\n                  var _iterator2 = _createForOfIteratorHelper(vertices),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var vertice = _step2.value;\n\n                      _this.drawLinkTriangle(particle, link, vertice);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }\n              })();\n            }\n\n            this.drawLinkLine(particle, link);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.context.restore();\n      }\n\n      if (radius > 0) {\n        Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n      }\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      if (!this.context) {\n        return;\n      }\n\n      Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      if (!this.context) {\n        return;\n      }\n\n      Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var options = this.container.options;\n      var connectOptions = options.interactivity.modes.connect;\n\n      if (this.context) {\n        return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n      }\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.options;\n      var background = options.background;\n      var element = this.element;\n\n      if (!element) {\n        return;\n      }\n\n      var elementStyle = element.style;\n\n      if (background.color) {\n        var color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n        if (color) {\n          elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n        }\n      }\n\n      if (background.image) {\n        elementStyle.backgroundImage = background.image;\n      }\n\n      if (background.position) {\n        elementStyle.backgroundPosition = background.position;\n      }\n\n      if (background.repeat) {\n        elementStyle.backgroundRepeat = background.repeat;\n      }\n\n      if (background.size) {\n        elementStyle.backgroundSize = background.size;\n      }\n    }\n  }]);\n\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","container","size","height","width","context","generatedCanvas","resize","options","cover","backgroundMask","color","trail","particles","move","coverRgb","ColorUtils","colorToRgb","coverColor","undefined","r","g","b","a","opacity","trailFillColor","fillColor","initBackground","paint","canvas","_a","className","Constants","canvasClass","element","remove","offsetHeight","offsetWidth","getContext","retina","init","CanvasUtils","clear","enable","paintBase","getStyleFromRgb","length","p1","link1","link2","_b","p2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","pos1","getPosition","pos2","pos3","ctx","colorTriangle","linksOptions","linkColor","id","linksColors","get","linksColor","randomColorValue","getRandomRgbColor","sourceColor","getFillColor","destColor","mix","hslColor","hslToRgb","linksWidth","drawLinkTriangle","link","_c","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","getStrokeColor","drawLinkLine","distance","warp","shadow","lineStyle","drawConnectLine","particle","lineColor","mousePos","beginPos","drawGrabLine","delta","_d","_e","image","loaded","pfColor","psColor","radius","bubble","infectionStage","infecter","infection","infectionStages","stages","infectionColor","infectionRgb","fColor","sColor","fillColorValue","strokeColorValue","stroke","save","map","l","vertices","filter","t","indexOf","vertice","restore","drawParticle","plugin","drawPlugin","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","style","backgroundColor","backgroundImage","position","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        const options = this.container.options;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n        this.coverColor =\n            coverRgb !== undefined\n                ? {\n                    r: coverRgb.r,\n                    g: coverRgb.g,\n                    b: coverRgb.b,\n                    a: cover.opacity,\n                }\n                : undefined;\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n        this.element = canvas;\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (!this.context) {\n            return;\n        }\n        if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n        }\n        else {\n            this.paintBase();\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getFillColor();\n                const destColor = p2.getFillColor();\n                if (sourceColor && destColor) {\n                    colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorTriangle = linkColor;\n            }\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a, _b, _c;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n                const destColor = (_b = p2.getFillColor()) !== null && _b !== void 0 ? _b : p2.getStrokeColor();\n                if (sourceColor && destColor) {\n                    colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorLine = linkColor;\n            }\n        }\n        const width = (_c = p1.linksWidth) !== null && _c !== void 0 ? _c : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e;\n        if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        if (pfColor === undefined) {\n            return;\n        }\n        const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n        const options = this.container.options;\n        const twinkle = particle.particlesOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n        const opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n        const infectionStage = particle.infecter.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n        const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n        const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n        if (!this.context || !fillColorValue) {\n            return;\n        }\n        const strokeColorValue = sColor !== undefined\n            ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity)\n            : fillColorValue;\n        if (particle.links.length > 0) {\n            this.context.save();\n            for (const link of particle.links) {\n                if (particle.particlesOptions.links.triangles.enable) {\n                    const links = particle.links.map((l) => l.destination);\n                    const vertices = link.destination.links.filter((t) => links.indexOf(t.destination) >= 0);\n                    if (vertices.length) {\n                        for (const vertice of vertices) {\n                            this.drawLinkTriangle(particle, link, vertice);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        if (radius > 0) {\n            Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n        }\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    paintBase(baseColor) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}