{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar AbsorberInstance = /*#__PURE__*/function () {\n  function AbsorberInstance(absorbers, container, options, position) {\n    _classCallCheck(this, AbsorberInstance);\n\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position;\n    this.options = options;\n    this.dragging = false;\n    var size = options.size.value * container.retina.pixelRatio;\n    var random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n    var minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n\n    if (random) {\n      size = Utils_1.Utils.randomInRange(minSize, size);\n    }\n\n    this.opacity = this.options.opacity;\n    this.size = size * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density;\n    var limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n    var color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  _createClass(AbsorberInstance, [{\n    key: \"attract\",\n    value: function attract(particle) {\n      var options = this.options;\n\n      if (options.draggable) {\n        var mouse = this.container.interactivity.mouse;\n\n        if (mouse.clicking && mouse.downPosition) {\n          var mouseDist = Utils_1.Utils.getDistance(this.position, mouse.downPosition);\n\n          if (mouseDist <= this.size) {\n            this.dragging = true;\n          }\n        } else {\n          this.dragging = false;\n        }\n\n        if (this.dragging && mouse.position) {\n          this.position.x = mouse.position.x;\n          this.position.y = mouse.position.y;\n        }\n      }\n\n      var pos = particle.getPosition();\n\n      var _Utils_1$Utils$getDis = Utils_1.Utils.getDistances(this.position, pos),\n          dx = _Utils_1$Utils$getDis.dx,\n          dy = _Utils_1$Utils$getDis.dy,\n          distance = _Utils_1$Utils$getDis.distance;\n\n      var angle = Math.atan2(dx, dy);\n      var acceleration = this.mass / Math.pow(distance, 2);\n\n      if (distance < this.size + particle.size.value) {\n        var sizeFactor = particle.size.value * 0.033 * this.container.retina.pixelRatio;\n\n        if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n          if (options.destroy) {\n            particle.destroy();\n          } else {\n            particle.needsNewPosition = true;\n            this.updateParticlePosition(particle, angle, acceleration);\n          }\n        } else {\n          if (options.destroy) {\n            particle.size.value -= sizeFactor;\n          }\n\n          this.updateParticlePosition(particle, angle, acceleration);\n        }\n\n        if (this.limit === undefined || this.size < this.limit) {\n          this.size += sizeFactor;\n        }\n\n        this.mass += sizeFactor * this.options.size.density;\n      } else {\n        this.updateParticlePosition(particle, angle, acceleration);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this.initialPosition;\n      this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      context.translate(this.position.x, this.position.y);\n      context.beginPath();\n      context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n      context.closePath();\n      context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n      context.fill();\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition() {\n      var _a;\n\n      var container = this.container;\n      var percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n        x: Math.random() * 100,\n        y: Math.random() * 100\n      };\n      return {\n        x: percentPosition.x / 100 * container.canvas.size.width,\n        y: percentPosition.y / 100 * container.canvas.size.height\n      };\n    }\n  }, {\n    key: \"updateParticlePosition\",\n    value: function updateParticlePosition(particle, angle, acceleration) {\n      var _a;\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      var canvasSize = this.container.canvas.size;\n\n      if (particle.needsNewPosition) {\n        var pSize = particle.size.value;\n        particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n        particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n        particle.needsNewPosition = false;\n      }\n\n      if (this.options.orbits) {\n        if (particle.orbitRadius === undefined) {\n          particle.orbitRadius = Utils_1.Utils.getDistance(particle.getPosition(), this.position);\n        }\n\n        if (particle.orbitRadius <= this.size && !this.options.destroy) {\n          particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n        }\n\n        if (particle.orbitAngle === undefined) {\n          particle.orbitAngle = Math.random() * Math.PI * 2;\n        }\n\n        var orbitRadius = particle.orbitRadius;\n        var orbitAngle = particle.orbitAngle;\n        particle.velocity.horizontal = 0;\n        particle.velocity.vertical = 0;\n        particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n        particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n        particle.orbitRadius -= acceleration;\n        particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100;\n      } else {\n        particle.velocity.horizontal += Math.sin(angle) * acceleration;\n        particle.velocity.vertical += Math.cos(angle) * acceleration;\n      }\n    }\n  }]);\n\n  return AbsorberInstance;\n}();\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","absorbers","container","options","position","_a","_b","initialPosition","dragging","size","retina","pixelRatio","random","enable","minSize","minimumValue","Utils","randomInRange","opacity","mass","density","limit","undefined","color","ColorUtils","colorToRgb","b","g","r","calcPosition","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","x","y","pos","getPosition","getDistances","dx","dy","distance","angle","Math","atan2","acceleration","pow","sizeFactor","destroy","needsNewPosition","updateParticlePosition","isPointInside","canvas","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","width","height","destroyed","canvasSize","pSize","orbits","orbitRadius","max","orbitAngle","velocity","horizontal","vertical","cos","sin","moveSpeed"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position;\n        this.options = options;\n        this.dragging = false;\n        let size = options.size.value * container.retina.pixelRatio;\n        const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n        const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n        if (random) {\n            size = Utils_1.Utils.randomInRange(minSize, size);\n        }\n        this.opacity = this.options.opacity;\n        this.size = size * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    }\n    attract(particle) {\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = this.container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = Utils_1.Utils.getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.Utils.getDistances(this.position, pos);\n        const angle = Math.atan2(dx, dy);\n        const acceleration = this.mass / Math.pow(distance, 2);\n        if (distance < this.size + particle.size.value) {\n            const sizeFactor = particle.size.value * 0.033 * this.container.retina.pixelRatio;\n            if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, angle, acceleration);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, angle, acceleration);\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density;\n        }\n        else {\n            this.updateParticlePosition(particle, angle, acceleration);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a;\n        const container = this.container;\n        const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n            x: Math.random() * 100,\n            y: Math.random() * 100,\n        };\n        return {\n            x: (percentPosition.x / 100) * container.canvas.size.width,\n            y: (percentPosition.y / 100) * container.canvas.size.height,\n        };\n    }\n    updateParticlePosition(particle, angle, acceleration) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        if (particle.needsNewPosition) {\n            const pSize = particle.size.value;\n            particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n            particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.orbitRadius === undefined) {\n                particle.orbitRadius = Utils_1.Utils.getDistance(particle.getPosition(), this.position);\n            }\n            if (particle.orbitRadius <= this.size && !this.options.destroy) {\n                particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n            }\n            if (particle.orbitAngle === undefined) {\n                particle.orbitAngle = Math.random() * Math.PI * 2;\n            }\n            const orbitRadius = particle.orbitRadius;\n            const orbitAngle = particle.orbitAngle;\n            particle.velocity.horizontal = 0;\n            particle.velocity.vertical = 0;\n            particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n            particle.orbitRadius -= acceleration;\n            particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100;\n        }\n        else {\n            particle.velocity.horizontal += Math.sin(angle) * acceleration;\n            particle.velocity.vertical += Math.cos(angle) * acceleration;\n        }\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}