{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var particlesOptions = particle.particlesOptions;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n      var moveSpeed = baseSpeed / 2 * slowFactor * delta.factor;\n      this.applyNoise(delta);\n      particle.position.x += particle.velocity.horizontal * moveSpeed;\n      particle.position.y += particle.velocity.vertical * moveSpeed;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n  }, {\n    key: \"applyNoise\",\n    value: function applyNoise(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.particlesOptions;\n      var noiseOptions = particlesOptions.move.noise;\n      var noiseEnabled = noiseOptions.enable;\n\n      if (!noiseEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastNoiseTime <= particle.noiseDelay) {\n        particle.lastNoiseTime += delta.value;\n        return;\n      }\n\n      var noise = container.noise.generate(particle);\n      particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n      particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n      particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n      particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n      particle.lastNoiseTime -= particle.noiseDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.options;\n\n      if (!options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var windowDimension = {\n        height: window.innerHeight / 2,\n        width: window.innerWidth / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var tmp = {\n        x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n        y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce)\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.options;\n      var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/home/majidev/Documentos/dev/portfolio/portfolio-emajidev/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","container","particle","delta","bubble","inRange","links","plugins","plugin","destroyed","particleUpdate","moveParticle","moveParallax","_a","particlesOptions","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","factor","applyNoise","position","x","velocity","horizontal","y","vertical","vibrate","Math","sin","cos","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","generate","angle","length","Utils","clamp","options","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","windowDimension","height","window","innerHeight","width","innerWidth","parallaxSmooth","smooth","tmp","size","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a;\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n        const moveSpeed = (baseSpeed / 2) * slowFactor * delta.factor;\n        this.applyNoise(delta);\n        particle.position.x += particle.velocity.horizontal * moveSpeed;\n        particle.position.y += particle.velocity.vertical * moveSpeed;\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n    }\n    applyNoise(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        const noiseOptions = particlesOptions.move.noise;\n        const noiseEnabled = noiseOptions.enable;\n        if (!noiseEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastNoiseTime <= particle.noiseDelay) {\n            particle.lastNoiseTime += delta.value;\n            return;\n        }\n        const noise = container.noise.generate(particle);\n        particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n        particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n        particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n        particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n        particle.lastNoiseTime -= particle.noiseDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.options;\n        if (!options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const windowDimension = {\n            height: window.innerHeight / 2,\n            width: window.innerWidth / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const tmp = {\n            x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n            y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce),\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.options;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}